import gradio as gr
import yaml
import os
import copy
import threading
import time
import cv2
import numpy as np
import json
from datetime import datetime
import requests
import socket
from collections import deque
import websocket  # pip install websocket-client
import subprocess

CONFIG_PATH = os.path.join(os.path.dirname(__file__), 'config.yaml')
WEB_CONFIG_PATH = os.path.join(os.path.dirname(__file__), 'web_config.json')
RESULTS_DIR = os.path.join(os.path.dirname(__file__), 'results')
os.makedirs(RESULTS_DIR, exist_ok=True)

ALARM_MAX = 200

# –Ø–≤–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–æ–≤ –∏ —Å–∏–≥–Ω–∞–ª–æ–≤
DEFAULT_URL1 = "rtsp://192.168.0.172:8554/stream"

def load_web_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    default_config = {
        "api_host": "192.168.0.172",
        "api_port": 8000,
        "last_updated": ""
    }
    
    try:
        if os.path.exists(WEB_CONFIG_PATH):
            with open(WEB_CONFIG_PATH, 'r', encoding='utf-8') as f:
                config = json.load(f)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
                for key, value in default_config.items():
                    if key not in config:
                        config[key] = value
                return config
        else:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            save_web_config(default_config)
            return default_config
    except Exception as e:
        print(f"[ERROR] Failed to load web config: {e}")
        return default_config

def save_web_config(config):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        config["last_updated"] = datetime.now().isoformat()
        with open(WEB_CONFIG_PATH, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=4, ensure_ascii=False)
        return True
    except Exception as e:
        print(f"[ERROR] Failed to save web config: {e}")
        return False

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å —Ç—Ä–µ–≤–æ–≥
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥ —Å—ã—Ä—ã—Ö UDP —Å–æ–æ–±—â–µ–Ω–∏–π
raw_udp_log = deque(maxlen=ALARM_MAX)

# --- WebSocket listener ---
WS_URL = os.environ.get("ALARM_WS_URL", "ws://localhost:8008") 

# API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
web_config = load_web_config()
API_BASE_URL = f"http://{web_config['api_host']}:{web_config['api_port']}"  # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API

def load_config_from_api():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ API"""
    try:
        response = requests.get(f"{API_BASE_URL}/config", timeout=10)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"[ERROR] Failed to load config from API: {response.status_code}")
            return {}
    except Exception as e:
        print(f"[ERROR] Failed to connect to API: {e}")
        return {}

def update_config_param(section, key, value):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API"""
    try:
        update_data = {
            "section": section,
            "key": key,
            "value": value
        }
        response = requests.patch(f"{API_BASE_URL}/config", json=update_data, timeout=10)
        if response.status_code == 200:
            return True, f"–ü–∞—Ä–∞–º–µ—Ç—Ä {section}.{key} –æ–±–Ω–æ–≤–ª–µ–Ω"
        else:
            return False, f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}"

def send_config_to_rockchip():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Rockchip –∏–∑ API
    config = load_config_from_api()
    rockchip = config.get('rockchip', {})
    ip = rockchip.get('ip')
    user = rockchip.get('user')
    password = rockchip.get('password')
    remote_path = rockchip.get('config_path')
    if not all([ip, user, password, remote_path]):
        return False, '–ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Rockchip –∑–∞–¥–∞–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥–µ'
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º sshpass –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ä–æ–ª—è (sshpass –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    local_path = CONFIG_PATH
    scp_cmd = [
        'sshpass', '-p', password,
        'scp', '-o', 'StrictHostKeyChecking=no', local_path, f'{user}@{ip}:{remote_path}'
    ]
    try:
        result = subprocess.run(scp_cmd, check=True, capture_output=True, text=True)
        return True, '–ö–æ–Ω—Ñ–∏–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ Rockchip!'
    except subprocess.CalledProcessError as e:
        return False, f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e.stderr}'

def send_config_via_api():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ —Ä–æ–∫—á–∏–ø —á–µ—Ä–µ–∑ API –≤–º–µ—Å—Ç–æ SCP"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ —á–µ—Ä–µ–∑ API
        config = load_config_from_api()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã API –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        rockchip = config.get('rockchip', {})
        api_host = rockchip.get('ip', '192.168.0.173')
        api_port = rockchip.get('api_port', 8000)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL API
        api_url = f"http://{api_host}:{api_port}/config"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ —á–µ—Ä–µ–∑ API
        response = requests.put(api_url, json=config, timeout=10)
        
        if response.status_code == 200:
            return True, f'–ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ API –Ω–∞ {api_host}:{api_port}'
        else:
            return False, f'–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}'
            
    except requests.exceptions.ConnectionError:
        return False, f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API –Ω–∞ {api_host}:{api_port}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ API —Å–µ—Ä–≤–∏—Å.'
    except requests.exceptions.Timeout:
        return False, '–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API'
    except Exception as e:
        return False, f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ API: {str(e)}'

def update_config_param_text(section, key, value):
    """–û–±–µ—Ä—Ç–∫–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ (ok, msg)"""
    ok, msg = update_config_param(section, key, value)
    return (msg if ok else f"‚ùå {msg}")

def stream_video(rtsp_url):
    if not rtsp_url:
        print("RTSP URL is empty. Returning blank image.")
        blank_image = np.zeros((480, 640, 3), dtype=np.uint8)
        cv2.putText(blank_image, "No RTSP link", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
        while True:
            yield blank_image
            time.sleep(1)
    while True:
        print(f"Connecting to RTSP stream: {rtsp_url}")
        cap = cv2.VideoCapture(rtsp_url)
        if not cap.isOpened():
            print(f"Error: Could not open stream at {rtsp_url}. Retrying in 5 seconds...")
            cap.release()
            time.sleep(5)
            continue
        while True:
            ret, frame = cap.read()
            if not ret:
                print(f"Stream at {rtsp_url} ended. Reconnecting...")
                break
            yield cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            time.sleep(1/25)
        cap.release()

def get_default_urls(config):
    """–ü–æ–ª—É—á–∞–µ—Ç URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    system_config = config.get('system', {})
    rtsp_stream_url = system_config.get('rtsp_stream_url', DEFAULT_URL1)
    rtsp_annotated_url = system_config.get('rtsp_annotated_url', DEFAULT_URL1)
    return rtsp_stream_url, rtsp_annotated_url

def get_raw_udp_text():
    lines = list(raw_udp_log)
    if not lines:
        return "–ù–µ—Ç UDP —Å–æ–æ–±—â–µ–Ω–∏–π"
    return '\n'.join(lines)

def build_interface():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ API
    config = load_config_from_api()
    
    # –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å —Ñ–æ—Ä–º–æ–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
    if not config:
        with gr.Blocks(title="–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API") as demo:
            gr.Markdown("# ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API")
            gr.Markdown("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API —Å–µ—Ä–≤–∏—Å—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            gr.Markdown("1. –ó–∞–ø—É—â–µ–Ω –ª–∏ API —Å–µ—Ä–≤–∏—Å –Ω–∞ Rockchip")
            gr.Markdown("2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ IP –∞–¥—Ä–µ—Å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π API_BASE_URL")
            gr.Markdown("3. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ 8000")
            gr.Markdown(f"**–¢–µ–∫—É—â–∏–π URL API:** {API_BASE_URL}")
            if web_config.get("last_updated"):
                last_updated = datetime.fromisoformat(web_config["last_updated"]).strftime("%d.%m.%Y %H:%M:%S")
                gr.Markdown(f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {last_updated}")
            
            # –§–æ—Ä–º–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ API
            gr.Markdown("## üîß –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å API")
            with gr.Row():
                api_host_input = gr.Textbox(
                    label="IP –∞–¥—Ä–µ—Å API", 
                    value=web_config.get("api_host", "192.168.0.172"), 
                    placeholder="192.168.0.172",
                    interactive=True
                )
                api_port_input = gr.Textbox(
                    label="–ü–æ—Ä—Ç API", 
                    value=str(web_config.get("api_port", 8000)), 
                    placeholder="8000",
                    interactive=True
                )
            with gr.Row():
                test_connection_btn = gr.Button("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", variant="secondary")
                apply_api_url_btn = gr.Button("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å", variant="primary")
                reload_page_btn = gr.Button("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", variant="secondary")
                reset_config_btn = gr.Button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—é", variant="secondary")
            
            status_msg = gr.Markdown("")
            
            def test_api_connection(host, port):
                """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API"""
                try:
                    test_url = f"http://{host}:{port}/config"
                    response = requests.get(test_url, timeout=5)
                    if response.status_code == 200:
                        return "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! API –¥–æ—Å—Ç—É–ø–µ–Ω."
                    else:
                        return f"‚ùå API –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π: {response.status_code}"
                except requests.exceptions.ConnectionError:
                    return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {host}:{port}"
                except requests.exceptions.Timeout:
                    return f"‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {host}:{port}"
                except Exception as e:
                    return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            
            def apply_new_api_url(host, port):
                """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å API –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥"""
                global API_BASE_URL, web_config
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                web_config["api_host"] = host
                web_config["api_port"] = int(port)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                if save_web_config(web_config):
                    API_BASE_URL = f"http://{host}:{port}"
                    return f"‚úÖ –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å API —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {API_BASE_URL}. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π."
                else:
                    return "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
            
            test_connection_btn.click(
                test_api_connection, 
                inputs=[api_host_input, api_port_input], 
                outputs=[status_msg]
            )
            apply_api_url_btn.click(
                apply_new_api_url, 
                inputs=[api_host_input, api_port_input], 
                outputs=[status_msg]
            )
            
            def reload_page():
                """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
                return "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã..."
            
            def reset_config():
                """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
                global web_config
                default_config = {
                    "api_host": "192.168.0.172",
                    "api_port": 8000,
                    "last_updated": ""
                }
                if save_web_config(default_config):
                    web_config = default_config
                    return "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É."
                else:
                    return "‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
            
            reload_page_btn.click(
                reload_page,
                outputs=[status_msg]
            )
            reset_config_btn.click(
                reset_config,
                outputs=[status_msg]
            )
            
            return demo

    rockchip = config.get('rockchip', {})
    
    # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    rtsp_stream_url, rtsp_annotated_url = get_default_urls(config)
    
    with gr.Blocks(title="–í–∏–¥–µ–æ–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏") as demo:
        gr.Markdown("# –í–∏–¥–µ–æ–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        with gr.Row():
            with gr.Column():
                url1 = gr.Textbox(label="RTSP URL 1 (–û—Ä–∏–≥–∏–Ω–∞–ª)", value=rtsp_stream_url, interactive=True)
                gr.HTML('<img src="http://localhost:5000/video" style="width:100%; max-width: 800px; border: 2px solid #444; border-radius: 8px;">')
            with gr.Column():
                def update_alarm_box():
                    return get_raw_udp_text()
                alarm_box = gr.Textbox(label="RAW UDP —Ç—Ä–µ–≤–æ–≥–∏ (json)", value=update_alarm_box(), lines=30, interactive=False, elem_id="alarm_box", every=2)
                
                def clear_alarm_box():
                    """–û—á–∏—â–∞–µ—Ç –æ–∫–Ω–æ RAW UDP —Ç—Ä–µ–≤–æ–≥"""
                    global raw_udp_log
                    raw_udp_log.clear()
                    return "–û–∫–Ω–æ –æ—á–∏—â–µ–Ω–æ"
                
                clear_alarm_btn = gr.Button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –æ–∫–Ω–æ —Ç—Ä–µ–≤–æ–≥", variant="secondary")
        
        # --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã config.yaml ---
        gr.Markdown("## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        # –ö–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        with gr.Row():
            refresh_config_btn = gr.Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–∑ API", variant="secondary")
            api_send_btn = gr.Button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ API", variant="secondary")
        
        # --- –ë–ª–æ–∫–∏ —Ç—Ä–µ–≤–æ–≥ ---
        gr.Markdown("### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–≤–æ–≥")
        
        # –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —Ç—Ä–µ–≤–æ–≥
        VIOLATION_TRANSLATIONS = {
            'cigarette': '–ö—É—Ä–µ–Ω–∏–µ',
            'closed_eyes': '–ó–∞–∫—Ä—ã—Ç—ã–µ –≥–ª–∞–∑–∞',
            'closed_eyes_duration': '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–∫—Ä—ã—Ç—ã—Ö –≥–ª–∞–∑',
            'head_pose': '–ü–æ–≤–æ—Ä–æ—Ç –≥–æ–ª–æ–≤—ã',
            'no_belt': '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–º–Ω—è',
            'no_driver': '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è',
            'no_face': '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∏—Ü–∞',
            'phone': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
            'yawn': '–ó–µ–≤–æ—Ç–∞'
        }
        
        violation_blocks = {}
        
        # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–µ–≤–æ–≥–∏, –≥—Ä—É–ø–ø–∏—Ä—É—è –ø–æ 3 –≤ —Å—Ç—Ä–æ–∫—É
        violation_items = list(VIOLATION_TRANSLATIONS.items())
        for i in range(0, len(violation_items), 3):
            with gr.Row():
                for j in range(3):
                    if i + j < len(violation_items):
                        violation_type, label = violation_items[i + j]
                        violation_config = config.get(violation_type, {})
                        
                        with gr.Column():
                            with gr.Group():
                                with gr.Row():
                                    gr.Markdown(f"**{label}**")
                                    enable_checkbox = gr.Checkbox(
                                        label="–í–∫–ª—é—á–∏—Ç—å", 
                                        value=violation_config.get('enable', True),
                                        interactive=True
                                    )
                                
                                with gr.Column():
                                    duration_input = gr.Textbox(
                                        label="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)", 
                                        value=str(violation_config.get('duration', 5)),
                                        interactive=True
                                    )
                                    threshold_input = gr.Textbox(
                                        label="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", 
                                        value=str(violation_config.get('threshold', 0.5)),
                                        interactive=True
                                    )
                                
                                violation_blocks[violation_type] = {
                                    'enable': enable_checkbox,
                                    'duration': duration_input,
                                    'threshold': threshold_input
                                }
        
        # --- Rockchip IP ---
        with gr.Row():
            rockchip_ip_box = gr.Textbox(label="IP Rockchip", value=rockchip.get('ip', ''), interactive=True)
            save_ip_btn = gr.Button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å IP Rockchip")
        
        status = gr.Markdown(visible=False)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–ª—è –±–ª–æ–∫–æ–≤ —Ç—Ä–µ–≤–æ–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        violation_fields = []
        for violation_type, fields in violation_blocks.items():
            violation_fields.extend([fields['enable'], fields['duration'], fields['threshold']])
        
        # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---
        
        def send_all_via_api(url1, rockchip_ip, *violation_values):
            """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API"""
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥ –∏–∑ API
                current_config = load_config_from_api()
                if not current_config:
                    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥ –∏–∑ API"
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                current_values = {}
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º IP Rockchip
                if rockchip_ip and rockchip_ip != current_config.get('rockchip', {}).get('ip', ''):
                    current_values['rockchip.ip'] = rockchip_ip
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π
                violation_items = list(VIOLATION_TRANSLATIONS.keys())
                value_index = 0
                
                for violation_type in violation_items:
                    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (3 –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –∫–∞–∂–¥–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: enable, duration, threshold)
                    enable_val = violation_values[value_index]
                    duration_val = float(violation_values[value_index + 1]) if violation_values[value_index + 1] else 5.0
                    threshold_val = float(violation_values[value_index + 2]) if violation_values[value_index + 2] else 0.5
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                    current_violation = current_config.get(violation_type, {})
                    current_enable = current_violation.get('enable', True)
                    current_duration = current_violation.get('duration', 5.0)
                    current_threshold = current_violation.get('threshold', 0.5)
                    
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    if enable_val != current_enable:
                        current_values[f'{violation_type}.enable'] = enable_val
                    
                    if abs(duration_val - current_duration) > 0.001:  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å float
                        current_values[f'{violation_type}.duration'] = duration_val
                    
                    if abs(threshold_val - current_threshold) > 0.001:  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å float
                        current_values[f'{violation_type}.threshold'] = threshold_val
                    
                    value_index += 3
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
                if not current_values:
                    return "‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                success_count = 0
                error_count = 0
                error_messages = []
                
                for param_path, value in current_values.items():
                    section, key = param_path.split('.', 1)
                    ok, msg = update_config_param(section, key, value)
                    if ok:
                        success_count += 1
                    else:
                        error_count += 1
                        error_messages.append(f"{param_path}: {msg}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if error_count == 0:
                    return f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
                else:
                    error_summary = f"‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {error_count} –∏–∑ {len(current_values)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:\n" + "\n".join(error_messages[:3])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
                    return error_summary
                    
            except Exception as e:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}"
        
        def save_rockchip_ip(ip):
            """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç IP Rockchip —á–µ—Ä–µ–∑ API"""
            ok, msg = update_config_param('rockchip', 'ip', ip)
            return (msg if ok else f"‚ùå {msg}")
        
        def refresh_config_from_api():
            """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ API"""
            config = load_config_from_api()
            if not config:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ API"
            
            rtsp_stream_url, rtsp_annotated_url = get_default_urls(config)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫–∏ —Ç—Ä–µ–≤–æ–≥
            violation_updates = []
            for violation_type in VIOLATION_TRANSLATIONS:
                violation_config = config.get(violation_type, {})
                violation_updates.extend([
                    violation_config.get('enable', True),  # enable
                    str(violation_config.get('duration', 5)),  # duration
                    str(violation_config.get('threshold', 0.5))  # threshold
                ])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º IP Rockchip –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            rockchip_ip = config.get('rockchip', {}).get('ip', '')
            
            return [rtsp_stream_url, "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ API"] + violation_updates + [rockchip_ip]
        
        # --- –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π ---
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –±–ª–æ–∫–∏ —Ç—Ä–µ–≤–æ–≥
        for violation_type, fields in violation_blocks.items():
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞ enable
            fields['enable'].change(
                fn=lambda checked, vt=violation_type: update_config_param_text(vt, 'enable', checked),
                inputs=[fields['enable']],
                outputs=[status]
            )
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            fields['duration'].change(
                fn=lambda value, vt=violation_type: update_config_param_text(vt, 'duration', float(value) if value else 5.0),
                inputs=[fields['duration']],
                outputs=[status]
            )
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            fields['threshold'].change(
                fn=lambda value, vt=violation_type: update_config_param_text(vt, 'threshold', float(value) if value else 0.5),
                inputs=[fields['threshold']],
                outputs=[status]
            )
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ —Ç—Ä–µ–≤–æ–≥
        clear_alarm_btn.click(clear_alarm_box, outputs=[alarm_box])
        
        api_send_btn.click(send_all_via_api, [url1, rockchip_ip_box] + violation_fields, [status])
        save_ip_btn.click(lambda ip: save_rockchip_ip(ip), [rockchip_ip_box], [status])
        
        refresh_config_btn.click(refresh_config_from_api, None, [url1] + [status] + violation_fields + [rockchip_ip_box])

        # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞ RAW UDP —Ç—Ä–µ–≤–æ–≥ —á–µ—Ä–µ–∑ —Ç–∞–π–º–µ—Ä (Gradio 5)
        refresh_timer = gr.Timer(2.0, visible=False)
        refresh_timer.tick(fn=lambda: get_raw_udp_text(), outputs=[alarm_box])
    
    return demo

# --- UDP listener for DSM alarms ---
def udp_alarm_listener(host="0.0.0.0", port=8008):
    import socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        sock.bind((host, port))
        print(f"[UDP] Listening for DSM alarms on {host}:{port}")
        while True:
            try:
                data, addr = sock.recvfrom(4096)
                msg = data.decode("utf-8")
                raw_udp_log.append(msg)
                print(f"[UDP] RAW from {addr}: {msg}")
            except Exception as e:
                print(f"[UDP] Error: {e}")
                time.sleep(1)
    except OSError as e:
        print(f"[UDP] Port {port} already in use, skipping UDP listener: {e}")
    except Exception as e:
        print(f"[UDP] Error: {e}")

# --- Start UDP listener in background thread ---
def start_udp_listener():
    t = threading.Thread(target=udp_alarm_listener, daemon=True)
    t.start()

def main():
    start_udp_listener()
    demo = build_interface()
    demo.launch(server_name="0.0.0.0", server_port=7860)

if __name__ == "__main__":
    main() 